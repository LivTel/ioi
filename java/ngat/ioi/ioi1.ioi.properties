#
# IO:I configuration file
#
# $HeadURL$
# $Revision$

# Command Implementation classes
ioi.command.implmentation.0				=ngat.ioi.ABORTImplementation
ioi.command.implmentation.1				=ngat.ioi.BIASImplementation
ioi.command.implmentation.2				=ngat.ioi.CONFIGImplementation
ioi.command.implmentation.3				=ngat.ioi.GET_STATUSImplementation
ioi.command.implmentation.4				=ngat.ioi.MULTRUNImplementation
ioi.command.implmentation.5				=ngat.ioi.REBOOTImplementation

# Hardware
# This file can be re-loaded on a REDATUM level reboot
# Mirror fold
ioi.mirror_fold_position 				=1
# focus offset in mm from the nominal telescope focus
ioi.focus.offset					= 0.0
#
# Low level IDL layer socket 
#
ioi.idl.server.hostname					=ioi_win
ioi.idl.server.port_number				=5000
#
# IDL Server Initialize command level
#
ioi.idl.initialize.level				=2
#
# SetDetector configuration
#
ioi.idl.set_detector.mux_type				=H2RG
ioi.idl.set_detector.num_outputs			=32
#
# SetGain configuration
#
ioi.idl.set_gain.gain					=8

#
# Temperature Controller
# Lakeshore Model 331 Temperature Controller config
#
# Whether to really talk to the temperature controller, or don't
ioi.temp_control.config.enable				=true
# The Address and port number for the ethernet to serial device
ioi.temp_control.config.device.socket.ip		=ioi_temperature_controller
ioi.temp_control.config.device.socket.port		=8888
# control read timeout config
ioi.temp_control.config.read.retry_count		=100
ioi.temp_control.config.read.pause			=100
# How many servo controlled temperature control loops we are using
ioi.temp_control.config.loop_count			=1
# The first control loop is used to servo the array via the invar block
# Which temperature control loop to set, either 1 or 2, usually 1
ioi.temp_control.config.loop.0				=1
# target temperature, in Kelvin
ioi.temp_control.config.target_temperature.0		=70
ioi.temp_control.config.ramp.on.0			=true
ioi.temp_control.config.ramp.rate.0			=1.0
# The second control loop is not used at the moment.
#ioi.temp_control.config.loop.1				=2
#ioi.temp_control.config.target_temperature.1		=100
#ioi.temp_control.config.ramp.on.1			=false
#ioi.temp_control.config.ramp.rate.1			=1.0
# Using a 25ohm resistor, HEATER_RANGE_HIGH dissapates a maximum of 25W, 
# HEATER_RANGE_MEDIUM dissapates a maximum of 2.5W
# Our 25 ohm resistor is rated at 30W in air without a heatsink.
ioi.temp_control.config.heater_range			=HEATER_RANGE_MEDIUM
ioi.temp_control.config.display_brightness		=BRIGHTNESS_25_PERCENT
# Input 0 / A is the sensor on the invar block
# Used to servo the temperature using loop 1
ioi.temp_control.temperature_input.0			=A
# Input 1 / B is either the Sidecar temperature, or can be swapped for the getter temperature.
ioi.temp_control.temperature_input.1			=B

# Sidecar Temperature Protection Thread configuration
ioi.sidecar.temperature.protection.enable		=true
ioi.sidecar.temperature.protection.sleep_time		=60000
# What temperature to  switch the sidecar ASIC off at.
# This probably should match the value of the :
# ioi.get_status.detector.temperature.warm.fail
# config to be consistent with GET_STATUS health and wellbeing data
ioi.sidecar.temperature.protection.warm.fail		=160
ioi.sidecar.temperature.protection.fail_on_comms_fault  =false

# Miscelaneous exposure related config
# The acknowledge time for the CONFIG command
ioi.config.acknowledge_time				=60000

# Thread Config
# priority offset (from NORM) of different sorts of thread
# server threads, traditionally +2
ioi.thread.priority.server				=0
# interrupt threads, traditionally +1
ioi.thread.priority.interrupt				=0
# normal threads, traditionally 0
ioi.thread.priority.normal				=0
# Telescope Image Transfer server and client connection threads
ioi.thread.priority.tit					=-5

# server connection thread
ioi.server_connection.default_acknowledge_time 		=60000
ioi.server_connection.min_acknowledge_time 		=10000

#
# CONFIG options
#
# Fowler sampling mode, either FOWLER or UP_THE_RAMP
ioi.config.fs_mode					=UP_THE_RAMP
ioi.config.FOWLER.nreset				=3
ioi.config.FOWLER.nread					=5
# length of time to do one reset in milliseconds
ioi.config.FOWLER.reset_execution_time			=1600
# length of time to do one read in milliseconds
ioi.config.FOWLER.read_execution_time			=1600
ioi.config.UP_THE_RAMP.nreset				=3
ioi.config.UP_THE_RAMP.nread				=1
ioi.config.UP_THE_RAMP.ndrop				=1
# length of time to do one reset in milliseconds
ioi.config.UP_THE_RAMP.reset_execution_time		=1600
# length of time to do one group (nread+ndrop), in milliseconds
# each read at 10us a pixel, for a 2048x2048 array with 32 multiplexors is approx: ((2048x2048)*10)/32 us = ~1.31s
# Actually this seems to take 1430
# But using 1310 per read/drop seems to work in terms of exposure length
ioi.config.UP_THE_RAMP.group_execution_time		=2620

# The filename that contains the persistent unique integer, used as a unique
# config id that is incremented every time the configuration succeeds.
# Note it is currently defined above the java directory, so that it
# is not lost every time the software is upgraded.
ioi.config.unique_id_filename 				=/icc/config/ioi_config_id.link

# Beam Steering Config
# Value of instrument name identifier to send to the BSS
ioi.bss.instrument_name					=IO:I

# Offset to apply to order numbers received in GET_FITS commands
ioi.get_fits.bss.order_number_offset			=200
ioi.get_fits.iss.order_number_offset			=255

#
# error handler
#
ioi.log.error.handler.0.name				=ngat.util.logging.FileLogHandler
# parameter 0 is filename
ioi.log.error.handler.0.param.0				=/icc/log/ioi_java_error
# parameter 1 is formatter
ioi.log.error.handler.0.param.1				=ngat.util.logging.BogstanLogFormatter
# parameter 2 is time period
ioi.log.error.handler.0.param.2				=HOURLY_ROTATION
#
# error handler 1 - datagram
#
ioi.log.error.handler.1.name				=ngat.util.logging.DatagramLogHandler
# parameter 0 is hostname
ioi.log.error.handler.1.param.0				=ltproxy
# parameter 1 is port number
ioi.log.error.handler.1.param.1				=2371
#
# log handler
#
# handler 0 - to file
ioi.log.log.handler.0.name				=ngat.util.logging.FileLogHandler
# parameter 0 is filename
ioi.log.log.handler.0.param.0				=/icc/log/ioi_java_log
# parameter 1 is formatter
ioi.log.log.handler.0.param.1				=ngat.util.logging.BogstanLogFormatter
# parameter 2 is time period
ioi.log.log.handler.0.param.2				=HOURLY_ROTATION
#
# log handler 1 - datagram
#
# handler 0 - to file
ioi.log.log.handler.1.name				=ngat.util.logging.DatagramLogHandler
# parameter 0 is hostname
ioi.log.log.handler.1.param.0				=ltproxy
# parameter 1 is port number
ioi.log.log.handler.1.param.1				=2371

#
# GET_STATUS config
#
ioi.get_status.instrument_name				=IO:I
# GET_STATUS: Detector temperature status (in Kelvin)
# Note these look at both temperature inputs, and therefore the cold side needs to be colder
# than the ASIC (or currently the getter temperature)
ioi.get_status.detector.temperature.warm.warn		=140
ioi.get_status.detector.temperature.warm.fail		=150
ioi.get_status.detector.temperature.cold.warn		=70
ioi.get_status.detector.temperature.cold.fail		=60

#
# REBOOT config
#
# reboot acknowledge times, how long each reboot type takes, in milliseconds
# Note sidecar temperature protection thread can take up to 1 minute to stop
ioi.reboot.acknowledge_time.REDATUM		=120000
ioi.reboot.acknowledge_time.SOFTWARE		=120000
ioi.reboot.acknowledge_time.HARDWARE		=300000
ioi.reboot.acknowledge_time.POWER_OFF		=300000
# Whether to actually do anything for each reboot level.
# Useful to disbale POWER_OFF level when no-one is local.
ioi.reboot.enable.REDATUM			=true
ioi.reboot.enable.SOFTWARE			=true
ioi.reboot.enable.HARDWARE			=true
ioi.reboot.enable.POWER_OFF			=false

#
# data directory the IDL socket server puts acquired data into
#
ioi.data.directory.root				=/icc/i-data/H2RG-C001-ASIC-LT1
ioi.data.directory.fowler			=FSRamp
ioi.data.directory.up_the_ramp			=UpTheRamp

#
# Whether to rename FITS images to the LT standard, and directory and instrument code.
#
ioi.file.fits.rename				=false
ioi.file.fits.directory				=/icc/i-data/
ioi.file.fits.instrument_code			=i
# Whether to add ISS/BSS/instrument  FITS headers to the default Teledyne ones
ioi.file.fits.annotate				=true

#
# MULTRUN config
#
# List of telescope offsets
# Do we want to do offsets between individual frames in the MULTRUN?
ioi.multrun.offset.enable		=true
# When we send an OFFSET_RA_DEC, should we wait for a DONE response from the RCS (=true), or not (=false)?
ioi.multrun.offset.wait_for_complete	=true
# If we are _NOT_ waiting for a DONE response from the RCS, sleep for this number of milliseconds before continuing.
ioi.multrun.offset.wait_sleep_time	=2000
ioi.multrun.offset.count		=9

ioi.multrun.offset.0.ra 		=0
ioi.multrun.offset.0.dec 		=0
ioi.multrun.offset.1.ra 		=7
ioi.multrun.offset.1.dec 		=7
ioi.multrun.offset.2.ra 		=-7
ioi.multrun.offset.2.dec 		=-7
ioi.multrun.offset.3.ra 		=-7
ioi.multrun.offset.3.dec 		=7
ioi.multrun.offset.4.ra 		=7
ioi.multrun.offset.4.dec 		=-7
ioi.multrun.offset.5.ra 		=0
ioi.multrun.offset.5.dec 		=-7
ioi.multrun.offset.6.ra 		=0
ioi.multrun.offset.6.dec 		=7
ioi.multrun.offset.7.ra 		=-7
ioi.multrun.offset.7.dec 		=0
ioi.multrun.offset.8.ra 		=7
ioi.multrun.offset.8.dec 		=0
